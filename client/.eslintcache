[{"C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\index.js":"1","C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\App.js":"2","C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\reportWebVitals.js":"3","C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\views\\Main.jsx":"4","C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\components\\Form.jsx":"5","C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\components\\ItemList.jsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":266,"mtime":1613436896890,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":6381,"mtime":1613685772068,"results":"11","hashOfConfig":"8"},{"size":2388,"mtime":1613596053409,"results":"12","hashOfConfig":"8"},{"size":968,"mtime":1613767121957,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1guo6bm",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\index.js",[],["29","30"],"C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\App.js",[],"C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\reportWebVitals.js",[],"C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\views\\Main.jsx",["31","32"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { navigate } from \"@reach/router\";\r\nimport Form from \"../components/Form\";\r\nimport ItemList from \"../components/ItemList\";\r\n\r\nexport default () => {\r\n    const [message, setMessage] = useState(\"Connecting...\");\r\n    const [user, setUser] = useState({});\r\n    const [users, setUsers] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [ load, setLoad ] = useState(false);\r\n    const [ errors, setErrors ] = useState([]);\r\n    const [ login, setLogin ] = useState(false);\r\n    const [ log, setLog ] = useState(false);\r\n    const [ inputForm, setInputForm ] = useState(true);\r\n    // console.log(\"User:\");\r\n    // console.log(user);\r\n    // console.log(\"Users:\");\r\n    // console.log(users);\r\n    // if (login) {\r\n        useEffect(()=>{\r\n            axios.get('http://localhost:8000/api/users', { withCredentials: true })\r\n                .then(res=>{\r\n                    console.log(\"Getting All Response:\");\r\n                    console.log(res.data);\r\n                    setUsers(res.data);\r\n                    setLoaded(true);\r\n                    navigate(\"/\");\r\n                });\r\n        },[])\r\n    // }\r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:8000/api\")\r\n            .then(res => setMessage(res.data.message))\r\n    }, []);\r\n\r\n    const createUser = (user) => {\r\n        console.log(\"Creating User:\");\r\n        console.log(user);\r\n        const errorArr = []; // Define a temp error array to push the messages in\r\n\r\n        // Validating object before sending to server\r\n        if (user.firstName === \"\") {\r\n            errorArr.push(\"Must enter first name!\");\r\n        }\r\n        if (user.lastName === \"\") {\r\n            errorArr.push(\"Must enter last name!\");\r\n        }\r\n        if (user.email === \"\") {\r\n            errorArr.push(\"Must enter email!\");\r\n        }\r\n        if (user.password === \"\") {\r\n            errorArr.push(\"Must enter password!\");\r\n        }\r\n        if (user.confirmPassword === \"\") {\r\n            errorArr.push(\"Did not confirm password!\");\r\n        }\r\n        if (user.confirmPassword !== user.password) {\r\n            errorArr.push(\"Passwords Must Match!\");\r\n        }\r\n        \r\n        // Return if any errors\r\n        if (errorArr.length > 0) {\r\n            // Set Errors\r\n            setErrors(errorArr);\r\n            return;\r\n        }\r\n        axios.post(\"http://localhost:8000/api/register\", user, { withCredentials: true })\r\n            .then(res => {\r\n                console.log(\"Post Response:\");\r\n                console.log(res);\r\n                setUser(res.data);\r\n                setLogin(true);\r\n                setErrors([]);\r\n                setInputForm(!inputForm)\r\n                setUsers([...users, user]);\r\n                navigate(\"/\");\r\n            })\r\n            .catch(err => {\r\n                console.log(\"F HERE\");\r\n                console.log(err.response.data.errors);\r\n                const errorResponse = err.response.data.errors; // Get the errors from err.response.data\r\n                const errorArr = []; // Define a temp error array to push the messages in\r\n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\r\n                    errorArr.push(errorResponse[key].message)\r\n                }\r\n                // Set Errors\r\n                setErrors(errorArr);\r\n                setLoad(true);\r\n            });\r\n    }\r\n\r\n    const getUser = (user) => {\r\n        console.log(\"Getting User:\");\r\n        console.log(user);\r\n        const errorArr = []; // Define a temp error array to push the messages in\r\n        // Validating object before sending to server\r\n        if (user.email === \"\") {\r\n            errorArr.push(\"No email was entered!\");\r\n        }\r\n        if (user.password === \"\") {\r\n            errorArr.push(\"No password was entered!\");\r\n        }\r\n        // Return if any errors\r\n        if (errorArr.length > 0) {\r\n            // Set Errors\r\n            setErrors(errorArr);\r\n            return;\r\n        }\r\n        axios.post(\"http://localhost:8000/api/login\", user, { withCredentials: true })\r\n            .then(res => {\r\n                console.log(\"Get Response:\");\r\n                console.log(res);\r\n                setUser(res.data);\r\n                setLogin(true);\r\n                setErrors([]);\r\n                setInputForm(!inputForm)\r\n                navigate(\"/\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err.response);\r\n                    errorArr.push(\"Invalid email or password!\")\r\n                    // Set Errors\r\n                    setErrors(errorArr);\r\n            });\r\n    }\r\n\r\n    const removingDOM = (id) => {\r\n        setUsers(users.filter(user => user._id !== id));\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1>Connection status: {message}</h1>\r\n            <h2> Logged In Status: {\r\n                login ?\r\n                (user.user.firstName + \" \" + user.user.lastName) :\r\n                \"No One!\"\r\n            } </h2>\r\n            {\r\n                login ?\r\n                <p style={{color: \"green\"}}>Success!</p> :\r\n                ''\r\n            }\r\n            {\r\n                inputForm ?\r\n                <>\r\n                    <button onClick={ e => {\r\n                        setLog(!log)\r\n                        setErrors([]);\r\n                        } }>Click to {\r\n                            log ? \r\n                            \"Register\" :\r\n                            \"Login\"\r\n                        }</button>\r\n                    {\r\n                        log ?\r\n                        <Form logged={log} submitInput={getUser} /> :\r\n                        <Form logged={log} submitInput={createUser} />\r\n                    }\r\n                    {\r\n                        errors.map((error, i) => {\r\n                            return(\r\n                                <p key={i} style={{color: \"red\"}}>{error}</p>\r\n                            )\r\n                        })\r\n                    }\r\n                </> :\r\n                ''\r\n            }\r\n            <hr/>\r\n            {\r\n                loaded ?\r\n                <ItemList items={users} removingDOM={removingDOM}/> :\r\n                'Loading users... (must login to view list)'\r\n            }\r\n        </>\r\n    )\r\n}","C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\components\\Form.jsx",["33","34"],"import React, { useState } from \"react\";\r\n\r\nexport default (props) => {\r\n    const { logged,  submitInput } = props;\r\n    const [ firstName, setFirstName ] = useState(\"\");\r\n    const [ lastName, setLastName ] = useState(\"\");\r\n    const [ email, setEmail ] = useState(\"\");\r\n    const [ password, setPassword ] = useState(\"\");\r\n    const [ confirmPassword, setConfirmPassword ] = useState(\"\");\r\n\r\n    const Process = (e) => {\r\n        e.preventDefault();\r\n        { \r\n            logged ?\r\n            submitInput({ email, password, confirmPassword }) :\r\n            submitInput({ firstName, lastName, email, password, confirmPassword })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={Process}>\r\n                { \r\n                    logged ?\r\n                    \"\" :\r\n                    <>\r\n                        <label>First Name:</label>\r\n                        <input type=\"text\" \r\n                        name=\"firstName\"\r\n                        value={firstName}\r\n                        onChange={ e => { setFirstName(e.target.value) } } /><br/>\r\n\r\n                        <label>Last Name:</label>\r\n                        <input type=\"text\" \r\n                        name=\"lastName\"\r\n                        value={lastName}\r\n                        onChange={ e => { setLastName(e.target.value) } } /><br/>\r\n                    </>\r\n                }\r\n\r\n                <label>Email:</label>\r\n                <input type=\"text\" \r\n                name=\"email\"\r\n                value={email}\r\n                onChange={ e => { setEmail(e.target.value) } } /><br/>\r\n                \r\n                <label>Password:</label>\r\n                <input type=\"text\" \r\n                name=\"password\"\r\n                value={password}\r\n                onChange={ e => { setPassword(e.target.value) } } /><br/>\r\n                \r\n                { \r\n                    logged ?\r\n                    \"\" :\r\n                    <>\r\n                        <label>Confirm Password:</label>\r\n                        <input type=\"text\" \r\n                        name=\"confirmPassword\"\r\n                        value={confirmPassword}\r\n                        onChange={ e => { setConfirmPassword(e.target.value) } } /><br/>\r\n                    </>\r\n                }\r\n\r\n                <input type=\"submit\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\jcr3x\\Desktop\\CODES\\CODINGDOJO\\MERN\\Lessions\\MERN_Auth\\Log_and_Reg\\MERN_Authentication\\client\\src\\components\\ItemList.jsx",["35","36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":7,"column":1,"nodeType":"43","endLine":180,"endColumn":2},{"ruleId":"44","severity":1,"message":"45","line":12,"column":13,"nodeType":"46","messageId":"47","endLine":12,"endColumn":17},{"ruleId":"41","severity":1,"message":"42","line":3,"column":1,"nodeType":"43","endLine":69,"endColumn":2},{"ruleId":"48","severity":1,"message":"49","line":13,"column":9,"nodeType":"50","messageId":"51","endLine":17,"endColumn":10},{"ruleId":"41","severity":1,"message":"42","line":4,"column":1,"nodeType":"43","endLine":26,"endColumn":2},{"ruleId":"44","severity":1,"message":"52","line":5,"column":13,"nodeType":"46","messageId":"47","endLine":5,"endColumn":24},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'load' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'removingDOM' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]